# Project Structure Guidelines

## File Organization

1. Components:
   - Each component should be in its own directory
   - Break down large components into smaller, focused pieces
   - Maximum 300 lines per file
   - Separate logic into custom hooks
   - Move styles to separate files

2. Directory Structure:
   ```
   src/
   ├── components/    # Reusable components
   │   ├── base/     # Base components
   │   ├── forms/    # Form components
   │   ├── layout/   # Layout components
   │   └── ui/       # UI components
   ├── hooks/        # Custom hooks
   │   ├── form/     # Form related hooks
   │   ├── ui/       # UI related hooks
   │   └── data/     # Data fetching hooks
   ├── lib/          # Core functionality
   │   ├── core/     # Core business logic
   │   ├── utils/    # Utility functions
   │   └── config/   # Configuration files
   ├── pages/        # Page components
   └── styles/       # Global styles
   ```

3. Component Structure:
   ```
   ComponentName/
   ├── index.ts              # Export file
   ├── Component.tsx         # Main component
   ├── useComponent.ts       # Component logic
   ├── Component.styles.ts   # Styles
   └── Component.types.ts    # TypeScript types
   ```

## Coding Standards

1. Naming Conventions:
   - Components: PascalCase
   - Hooks: camelCase
   - Utils: camelCase
   - Types: PascalCase

2. Import Order:
   - React
   - External dependencies
   - Internal lib
   - Internal components
   - Internal hooks
   - Internal utils
   - Styles

3. Component Guidelines:
   - Single responsibility principle
   - Props interface defined
   - Proper type annotations
   - Documented when complex

4. State Management:
   - Local state for UI
   - Context for shared state
   - Optimistic updates
   - Error handling

5. Performance:
   - Memoization when needed
   - Lazy loading
   - Code splitting
   - Bundle optimization