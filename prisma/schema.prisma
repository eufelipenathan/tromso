generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  @@map("users")
}

model Company {
  id            String    @id @default(cuid())
  name          String
  cnpj          String?
  email         String?
  phone         String?
  website       String?
  
  // Address fields
  cep           String?
  street        String?
  number        String?
  complement    String?
  neighborhood  String?
  city          String?
  state         String?
  mailbox       String?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  contacts      Contact[]
  deals         Deal[]
  interactions  Interaction[]
  customFields  CustomFieldValue[] @relation("CompanyFields")

  @@map("companies")
}

model Contact {
  id            String    @id @default(cuid())
  name          String
  email         String?
  phone         String?
  position      String?
  companyId     String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  company       Company   @relation(fields: [companyId], references: [id])
  deals         Deal[]
  customFields  CustomFieldValue[] @relation("ContactFields")

  @@map("contacts")
}

model FormSection {
  id            String    @id @default(cuid())
  name          String
  entityType    String    // company, contact, deal
  order         Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  fields        CustomField[]

  @@map("form_sections")
}

model CustomField {
  id            String    @id @default(cuid())
  name          String
  type          String    // text, number, email, phone, date, select, etc.
  required      Boolean   @default(false)
  fullWidth     Boolean   @default(false)
  multiple      Boolean   @default(false)
  order         Int
  options       String?   // JSON array for select fields
  sectionId     String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  section       FormSection @relation(fields: [sectionId], references: [id])
  values        CustomFieldValue[]

  @@map("custom_fields")
}

model CustomFieldValue {
  id            String    @id @default(cuid())
  value         String
  fieldId       String
  entityId      String    // ID of the company, contact, or deal
  entityType    String    // company, contact, deal
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  field         CustomField @relation(fields: [fieldId], references: [id])
  company       Company?    @relation("CompanyFields", fields: [entityId], references: [id], map: "company_field_values")
  contact       Contact?    @relation("ContactFields", fields: [entityId], references: [id], map: "contact_field_values")
  deal          Deal?       @relation("DealFields", fields: [entityId], references: [id], map: "deal_field_values")

  @@unique([fieldId, entityId])
  @@map("custom_field_values")
}

model Pipeline {
  id            String    @id @default(cuid())
  name          String
  order         Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  stages        Stage[]
  lostReasons   PipelineLostReason[]

  @@map("pipelines")
}

model Stage {
  id            String    @id @default(cuid())
  name          String
  order         Int       @default(0)
  pipelineId    String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  pipeline      Pipeline  @relation(fields: [pipelineId], references: [id])
  deals         Deal[]

  @@unique([name, pipelineId, deletedAt])
  @@map("stages")
}

model Deal {
  id            String    @id @default(cuid())
  title         String
  value         Decimal   @db.Decimal(10, 2)
  companyId     String
  contactId     String
  stageId       String
  lostReasonId  String?
  closedAt      DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  company       Company     @relation(fields: [companyId], references: [id])
  contact       Contact     @relation(fields: [contactId], references: [id])
  stage         Stage       @relation(fields: [stageId], references: [id])
  lostReason    LostReason? @relation(fields: [lostReasonId], references: [id])
  customFields  CustomFieldValue[] @relation("DealFields")

  @@map("deals")
}

model LostReason {
  id            String    @id @default(cuid())
  name          String
  order         Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  deals         Deal[]
  pipelines     PipelineLostReason[]

  @@unique([name, deletedAt])
  @@map("lost_reasons")
}

model PipelineLostReason {
  id            String    @id @default(cuid())
  pipelineId    String
  lostReasonId  String
  order         Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  pipeline      Pipeline    @relation(fields: [pipelineId], references: [id])
  lostReason    LostReason  @relation(fields: [lostReasonId], references: [id])

  @@unique([pipelineId, lostReasonId, deletedAt])
  @@map("pipeline_lost_reasons")
}

model Interaction {
  id            String    @id @default(cuid())
  type          String    // email, call, meeting, task
  title         String
  description   String?
  date          DateTime
  companyId     String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  company       Company   @relation(fields: [companyId], references: [id])

  @@map("interactions")
}